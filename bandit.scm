(define (get-listener-port port)
  (let ((sock-port (socket PF_INET SOCK_STREAM 0)))
    (bind sock-port AF_INET INADDR_ANY port)
    (listen sock-port 1)
    (let ((sock (car (accept sock-port))))
      (close sock-port)
      sock)))

(define (repl)
  (let ((listener-port (get-listener-port 9090)))
	  (let loop ((ports (select  (list listener-port 1) '() '() #f)))
	    (map (lambda (input-port)
		   (let ((input-port (if (number? input-port)
				       (fdes->inport input-port)
				       input-port)))
		    (catch #t 
			   (lambda () (display (eval (read input-port) (interaction-environment)) input-port))
			   (lambda (key . args) 
			     (if (eq? key 'quit)
			       (exit)
			       (begin
				 (display args)))))))
		 (car ports))
	    (loop (read)))))
